{"version":3,"file":"component---src-templates-category-tsx-d3929f44590c13ee9d8b.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/pagination.tsx","webpack://gatsby-starter-blog/./src/templates/category.tsx"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface PaginationProps {\n  currentPage: number\n  totalPages: number\n  pathPrefix?: string\n  className?: string\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n  pathPrefix = \"/\",\n  className = \"\",\n}) => {\n  if (totalPages <= 1) return null\n\n  const isFirstPage = currentPage === 1\n  const isLastPage = currentPage === totalPages\n\n  const prevPage =\n    currentPage - 1 === 1 ? pathPrefix : `${pathPrefix}${currentPage - 1}`\n\n  const nextPage = `${pathPrefix}${currentPage + 1}`\n\n  // ÌéòÏù¥ÏßÄ Î≤àÌò∏ ÏÉùÏÑ± Î°úÏßÅ\n  const getPageNumbers = () => {\n    const delta = 2 // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÏïûÎí§Î°ú Î≥¥Ïó¨Ï§Ñ ÌéòÏù¥ÏßÄ Ïàò\n    const range = []\n    const rangeWithDots = []\n\n    for (\n      let i = Math.max(2, currentPage - delta);\n      i <= Math.min(totalPages - 1, currentPage + delta);\n      i++\n    ) {\n      range.push(i)\n    }\n\n    if (currentPage - delta > 2) {\n      rangeWithDots.push(1, \"...\")\n    } else {\n      rangeWithDots.push(1)\n    }\n\n    rangeWithDots.push(...range)\n\n    if (currentPage + delta < totalPages - 1) {\n      rangeWithDots.push(\"...\", totalPages)\n    } else {\n      rangeWithDots.push(totalPages)\n    }\n\n    return rangeWithDots\n  }\n\n  const pageNumbers = totalPages > 1 ? getPageNumbers() : [1]\n\n  return (\n    <nav className={`flex items-center justify-center space-x-2 ${className}`}>\n      {/* Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄ */}\n      {!isFirstPage && (\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link to={prevPage} rel=\"prev\">\n            <ChevronLeft className=\"w-4 h-4 mr-1\" />\n            Ïù¥Ï†Ñ\n          </Link>\n        </Button>\n      )}\n\n      {/* ÌéòÏù¥ÏßÄ Î≤àÌò∏Îì§ */}\n      <div className=\"flex items-center space-x-1\">\n        {pageNumbers.map((pageNum, index) => {\n          if (pageNum === \"...\") {\n            return (\n              <span\n                key={`dots-${index}`}\n                className=\"px-3 py-2 text-muted-foreground\"\n              >\n                ...\n              </span>\n            )\n          }\n\n          const pageNumber = pageNum as number\n          const isCurrentPage = pageNumber === currentPage\n          const pagePath =\n            pageNumber === 1 ? pathPrefix : `${pathPrefix}${pageNumber}`\n\n          return (\n            <Button\n              key={pageNumber}\n              variant={isCurrentPage ? \"default\" : \"outline\"}\n              size=\"sm\"\n              asChild={!isCurrentPage}\n              disabled={isCurrentPage}\n            >\n              {isCurrentPage ? (\n                <span>{pageNumber}</span>\n              ) : (\n                <Link to={pagePath}>{pageNumber}</Link>\n              )}\n            </Button>\n          )\n        })}\n      </div>\n\n      {/* Îã§Ïùå ÌéòÏù¥ÏßÄ */}\n      {!isLastPage && (\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link to={nextPage} rel=\"next\">\n            Îã§Ïùå\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Link>\n        </Button>\n      )}\n    </nav>\n  )\n}\n\nexport default Pagination\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"@/components/layout\"\nimport Seo from \"@/components/seo\"\nimport CategoryTag from \"@/components/category-tag\"\nimport Pagination from \"@/components/pagination\"\n\ninterface CategoryTemplateProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n      }\n    }\n    allMarkdownRemark: {\n      nodes: Array<{\n        excerpt: string\n        fields: {\n          slug: string\n          autoDate: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n          description?: string\n          category?: string\n          tags?: string[]\n          thumbnail?: {\n            childImageSharp: any\n          }\n        }\n      }>\n      totalCount: number\n    }\n  }\n  location: any\n  pageContext: {\n    category: string\n    currentPage: number\n    totalPages: number\n    limit: number\n    skip: number\n  }\n}\n\nconst CategoryTemplate: React.FC<CategoryTemplateProps> = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const { category, currentPage, totalPages } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {/* Ïπ¥ÌÖåÍ≥†Î¶¨ Ìó§Îçî */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n          üìÅ {category} Ïπ¥ÌÖåÍ≥†Î¶¨\n        </h1>\n        <p className=\"text-muted-foreground\">\n          {data.allMarkdownRemark.totalCount}Í∞úÏùò Ìè¨Ïä§Ìä∏Í∞Ä ÏûàÏäµÎãàÎã§.\n        </p>\n      </div>\n\n      {posts.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">\n            Ïù¥ Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÎäî Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.\n          </p>\n          <Link\n            to=\"/\"\n            className=\"text-primary hover:underline mt-2 inline-block\"\n          >\n            ‚Üê ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞\n          </Link>\n        </div>\n      ) : (\n        <>\n          {/* Ìè¨Ïä§Ìä∏ Î™©Î°ù */}\n          <div className=\"space-y-8\">\n            {posts.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n              const thumbnail = getImage(\n                post.frontmatter.thumbnail?.childImageSharp\n              )\n\n              return (\n                <article\n                  key={post.fields.slug}\n                  className=\"group bg-card hover:bg-card/80 border rounded-lg shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden\"\n                >\n                  <div className=\"flex flex-col md:flex-row\">\n                    {/* Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄ - ÌÅ¥Î¶≠ Í∞ÄÎä• */}\n                    <Link\n                      to={post.fields.slug}\n                      className=\"md:w-96 w-full aspect-video flex-shrink-0 overflow-hidden block rounded-lg\"\n                    >\n                      {thumbnail ? (\n                        <GatsbyImage\n                          image={thumbnail}\n                          alt={title}\n                          className=\"w-full h-full object-cover object-center group-hover:scale-105 transition-transform duration-200\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                          <span className=\"text-muted-foreground text-sm\">\n                            No Image\n                          </span>\n                        </div>\n                      )}\n                    </Link>\n\n                    {/* ÏΩòÌÖêÏ∏† ÏòÅÏó≠ */}\n                    <div className=\"flex-1 p-6 flex flex-col justify-between\">\n                      <div>\n                        <header className=\"mb-3\">\n                          {/* Ï†úÎ™© - ÌÅ¥Î¶≠ Í∞ÄÎä• */}\n                          <Link to={post.fields.slug}>\n                            <h2 className=\"text-xl md:text-2xl font-bold text-foreground group-hover:text-primary hover:text-primary transition-colors line-clamp-2\">\n                              {title}\n                            </h2>\n                          </Link>\n                          <time className=\"text-sm text-muted-foreground mt-1 block\">\n                            {post.frontmatter.date ||\n                              (post.fields?.autoDate\n                                ? `${post.fields.autoDate.slice(\n                                    0,\n                                    4\n                                  )}ÎÖÑ ${post.fields.autoDate.slice(\n                                    5,\n                                    7\n                                  )}Ïõî ${post.fields.autoDate.slice(8, 10)}Ïùº`\n                                : \"\")}\n                          </time>\n                        </header>\n\n                        {/* Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ ÌÉúÍ∑∏ - ÎèÖÎ¶ΩÏ†ÅÏù∏ ÎßÅÌÅ¨ */}\n                        <div className=\"mb-3\">\n                          <CategoryTag\n                            category={post.frontmatter.category}\n                            tags={post.frontmatter.tags}\n                            showLinks={true}\n                          />\n                        </div>\n\n                        <section>\n                          <p className=\"text-muted-foreground leading-relaxed line-clamp-3\">\n                            {post.frontmatter.description ||\n                              post.excerpt.replace(/<[^>]*>/g, \"\")}\n                          </p>\n                        </section>\n                      </div>\n\n                      {/* ÏûêÏÑ∏Ìûà ÏùΩÍ∏∞ Î≤ÑÌäº - ÌÅ¥Î¶≠ Í∞ÄÎä• */}\n                      <div className=\"mt-4\">\n                        <Link\n                          to={post.fields.slug}\n                          className=\"text-primary text-sm font-medium hover:underline inline-block\"\n                        >\n                          ÏûêÏÑ∏Ìûà ÏùΩÍ∏∞ ‚Üí\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </article>\n              )\n            })}\n          </div>\n\n          {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}\n          {totalPages > 1 && (\n            <div className=\"mt-12\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                pathPrefix={`/category/${category.toLowerCase()}/`}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </Layout>\n  )\n}\n\nexport const Head: React.FC<CategoryTemplateProps> = ({ pageContext }) => {\n  return (\n    <Seo\n      title={`${pageContext.category} Ïπ¥ÌÖåÍ≥†Î¶¨`}\n      description={`${pageContext.category} Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Î™®Îì† Ìè¨Ïä§Ìä∏Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.`}\n    />\n  )\n}\n\nexport default CategoryTemplate\n\nexport const pageQuery = graphql`\n  query CategoryPostsByCategory($category: String!, $limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { category: { eq: $category } } }\n      sort: { frontmatter: { date: DESC } }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n          autoDate\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n          tags\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n            }\n          }\n        }\n      }\n      totalCount\n    }\n  }\n`\n"],"names":["_ref","currentPage","totalPages","pathPrefix","className","isFirstPage","isLastPage","prevPage","nextPage","pageNumbers","range","rangeWithDots","i","Math","max","min","push","getPageNumbers","React","Button","variant","size","asChild","Link","to","rel","ChevronLeft","map","pageNum","index","key","pageNumber","isCurrentPage","pagePath","disabled","ChevronRight","Head","_ref2","pageContext","Seo","title","category","description","data","location","siteTitle","site","siteMetadata","_data$site$siteMetada","posts","allMarkdownRemark","nodes","Layout","totalCount","length","post","frontmatter","fields","slug","thumbnail","getImage","_post$frontmatter$thu","childImageSharp","GatsbyImage","image","alt","date","_post$fields","autoDate","slice","CategoryTag","tags","showLinks","excerpt","replace","Pagination","toLowerCase"],"sourceRoot":""}