{"version":3,"file":"component---src-templates-tag-tsx-19faffda12cb3ab44463.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/templates/tag.tsx","webpack://gatsby-starter-blog/./src/components/pagination.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"@/components/layout\"\nimport Seo from \"@/components/seo\"\nimport CategoryTag from \"@/components/category-tag\"\nimport Pagination from \"@/components/pagination\"\n\ninterface TagTemplateProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n      }\n    }\n    allMarkdownRemark: {\n      nodes: Array<{\n        excerpt: string\n        fields: {\n          slug: string\n          autoDate: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n          description?: string\n          category?: string\n          tags?: string[]\n          thumbnail?: {\n            childImageSharp: any\n          }\n        }\n      }>\n      totalCount: number\n    }\n  }\n  location: any\n  pageContext: {\n    tag: string\n    currentPage: number\n    totalPages: number\n    limit: number\n    skip: number\n  }\n}\n\nconst TagTemplate: React.FC<TagTemplateProps> = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const { tag, currentPage, totalPages } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {/* 태그 헤더 */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">#{tag} 태그</h1>\n        <p className=\"text-muted-foreground\">\n          {data.allMarkdownRemark.totalCount}개의 포스트가 있습니다.\n        </p>\n      </div>\n\n      {posts.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">\n            이 태그가 포함된 포스트가 없습니다.\n          </p>\n          <Link\n            to=\"/\"\n            className=\"text-primary hover:underline mt-2 inline-block\"\n          >\n            ← 홈으로 돌아가기\n          </Link>\n        </div>\n      ) : (\n        <>\n          {/* 포스트 목록 */}\n          <div className=\"space-y-8\">\n            {posts.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n              const thumbnail = getImage(\n                post.frontmatter.thumbnail?.childImageSharp\n              )\n\n              return (\n                <article\n                  key={post.fields.slug}\n                  className=\"group bg-card hover:bg-card/80 border rounded-lg shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden\"\n                >\n                  <div className=\"flex flex-col md:flex-row\">\n                    {/* 썸네일 이미지 - 클릭 가능 */}\n                    <Link\n                      to={post.fields.slug}\n                      className=\"md:w-96 w-full aspect-video flex-shrink-0 overflow-hidden block rounded-lg\"\n                    >\n                      {thumbnail ? (\n                        <GatsbyImage\n                          image={thumbnail}\n                          alt={title}\n                          className=\"w-full h-full object-cover object-center group-hover:scale-105 transition-transform duration-200\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                          <span className=\"text-muted-foreground text-sm\">\n                            No Image\n                          </span>\n                        </div>\n                      )}\n                    </Link>\n\n                    {/* 콘텐츠 영역 */}\n                    <div className=\"flex-1 p-6 flex flex-col justify-between\">\n                      <div>\n                        <header className=\"mb-3\">\n                          {/* 제목 - 클릭 가능 */}\n                          <Link to={post.fields.slug}>\n                            <h2 className=\"text-xl md:text-2xl font-bold text-foreground group-hover:text-primary hover:text-primary transition-colors line-clamp-2\">\n                              {title}\n                            </h2>\n                          </Link>\n                          <time className=\"text-sm text-muted-foreground mt-1 block\">\n                            {post.frontmatter.date ||\n                              (post.fields?.autoDate\n                                ? `${post.fields.autoDate.slice(\n                                    0,\n                                    4\n                                  )}년 ${post.fields.autoDate.slice(\n                                    5,\n                                    7\n                                  )}월 ${post.fields.autoDate.slice(8, 10)}일`\n                                : \"\")}\n                          </time>\n                        </header>\n\n                        {/* 카테고리와 태그 - 독립적인 링크 */}\n                        <div className=\"mb-3\">\n                          <CategoryTag\n                            category={post.frontmatter.category}\n                            tags={post.frontmatter.tags}\n                            showLinks={true}\n                          />\n                        </div>\n\n                        <section>\n                          <p className=\"text-muted-foreground leading-relaxed line-clamp-3\">\n                            {post.frontmatter.description ||\n                              post.excerpt.replace(/<[^>]*>/g, \"\")}\n                          </p>\n                        </section>\n                      </div>\n\n                      {/* 자세히 읽기 버튼 - 클릭 가능 */}\n                      <div className=\"mt-4\">\n                        <Link\n                          to={post.fields.slug}\n                          className=\"text-primary text-sm font-medium hover:underline inline-block\"\n                        >\n                          자세히 읽기 →\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </article>\n              )\n            })}\n          </div>\n\n          {/* 페이지네이션 */}\n          {totalPages > 1 && (\n            <div className=\"mt-12\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                pathPrefix={`/tag/${tag\n                  .toLowerCase()\n                  .replace(/\\s+/g, \"-\")\n                  .replace(/[^a-z0-9가-힣-]/g, \"\")}/`}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </Layout>\n  )\n}\n\nexport const Head: React.FC<TagTemplateProps> = ({ pageContext }) => {\n  return (\n    <Seo\n      title={`#${pageContext.tag} 태그`}\n      description={`#${pageContext.tag} 태그가 포함된 모든 포스트를 확인해보세요.`}\n    />\n  )\n}\n\nexport default TagTemplate\n\nexport const pageQuery = graphql`\n  query TagPostsByTag($tag: String!, $limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      sort: { frontmatter: { date: DESC } }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n          autoDate\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n          tags\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n            }\n          }\n        }\n      }\n      totalCount\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface PaginationProps {\n  currentPage: number\n  totalPages: number\n  pathPrefix?: string\n  className?: string\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n  pathPrefix = \"/\",\n  className = \"\",\n}) => {\n  if (totalPages <= 1) return null\n\n  const isFirstPage = currentPage === 1\n  const isLastPage = currentPage === totalPages\n\n  const prevPage =\n    currentPage - 1 === 1 ? pathPrefix : `${pathPrefix}${currentPage - 1}`\n\n  const nextPage = `${pathPrefix}${currentPage + 1}`\n\n  // 페이지 번호 생성 로직\n  const getPageNumbers = () => {\n    const delta = 2 // 현재 페이지 앞뒤로 보여줄 페이지 수\n    const range = []\n    const rangeWithDots = []\n\n    for (\n      let i = Math.max(2, currentPage - delta);\n      i <= Math.min(totalPages - 1, currentPage + delta);\n      i++\n    ) {\n      range.push(i)\n    }\n\n    if (currentPage - delta > 2) {\n      rangeWithDots.push(1, \"...\")\n    } else {\n      rangeWithDots.push(1)\n    }\n\n    rangeWithDots.push(...range)\n\n    if (currentPage + delta < totalPages - 1) {\n      rangeWithDots.push(\"...\", totalPages)\n    } else {\n      rangeWithDots.push(totalPages)\n    }\n\n    return rangeWithDots\n  }\n\n  const pageNumbers = totalPages > 1 ? getPageNumbers() : [1]\n\n  return (\n    <nav className={`flex items-center justify-center space-x-2 ${className}`}>\n      {/* 이전 페이지 */}\n      {!isFirstPage && (\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link to={prevPage} rel=\"prev\">\n            <ChevronLeft className=\"w-4 h-4 mr-1\" />\n            이전\n          </Link>\n        </Button>\n      )}\n\n      {/* 페이지 번호들 */}\n      <div className=\"flex items-center space-x-1\">\n        {pageNumbers.map((pageNum, index) => {\n          if (pageNum === \"...\") {\n            return (\n              <span\n                key={`dots-${index}`}\n                className=\"px-3 py-2 text-muted-foreground\"\n              >\n                ...\n              </span>\n            )\n          }\n\n          const pageNumber = pageNum as number\n          const isCurrentPage = pageNumber === currentPage\n          const pagePath =\n            pageNumber === 1 ? pathPrefix : `${pathPrefix}${pageNumber}`\n\n          return (\n            <Button\n              key={pageNumber}\n              variant={isCurrentPage ? \"default\" : \"outline\"}\n              size=\"sm\"\n              asChild={!isCurrentPage}\n              disabled={isCurrentPage}\n            >\n              {isCurrentPage ? (\n                <span>{pageNumber}</span>\n              ) : (\n                <Link to={pagePath}>{pageNumber}</Link>\n              )}\n            </Button>\n          )\n        })}\n      </div>\n\n      {/* 다음 페이지 */}\n      {!isLastPage && (\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link to={nextPage} rel=\"next\">\n            다음\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Link>\n        </Button>\n      )}\n    </nav>\n  )\n}\n\nexport default Pagination\n"],"names":["Head","_ref2","pageContext","React","Seo","title","tag","description","_ref","data","location","siteTitle","site","siteMetadata","_data$site$siteMetada","posts","allMarkdownRemark","nodes","currentPage","totalPages","Layout","className","totalCount","length","Link","to","map","post","frontmatter","fields","slug","thumbnail","getImage","_post$frontmatter$thu","childImageSharp","key","GatsbyImage","image","alt","date","_post$fields","autoDate","slice","CategoryTag","category","tags","showLinks","excerpt","replace","Pagination","pathPrefix","toLowerCase","isFirstPage","isLastPage","prevPage","nextPage","pageNumbers","range","rangeWithDots","i","Math","max","min","push","getPageNumbers","Button","variant","size","asChild","rel","ChevronLeft","pageNum","index","pageNumber","isCurrentPage","pagePath","disabled","ChevronRight"],"sourceRoot":""}